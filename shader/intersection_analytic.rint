#version 460 core
#extension GL_NV_ray_tracing : require

hitAttributeNV vec3 hitNormal;

struct PrimitiveInstancePerFrameBuffer {
    mat4x4 localSpaceToBottomLevelAS;
    mat4x4 bottomLevelASToLocalSpace;
};

struct PrimitiveConstantBuffer {
    vec4 albedo;
    float reflectanceCoef;
    float diffuseCoef;
    float specularCoef;
    float specularPower;
    float stepScale;

    float padding[3];
};

struct PrimitiveInstanceConstantBuffer
{
    uint instanceIndex;
    uint primitiveType; // Procedural primitive type

    float padding[2];
};

struct ProceduralPrimitiveAttributes
{
    vec3 normal;
};

layout(set = 0, binding = 5, std140) uniform instanceData {
    PrimitiveInstancePerFrameBuffer aabbPrimitiveAttribs[10];
};

layout(shaderRecordNV) buffer inlineData {
    PrimitiveConstantBuffer materialCB;
    PrimitiveInstanceConstantBuffer aabbCB;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

float calculateAnimationInterpolant(in float elapsedTime, in float cycleDuration) {
    float curLinearCycleTime = mod(elapsedTime, cycleDuration) / cycleDuration;
    curLinearCycleTime = (curLinearCycleTime <= 0.5) ? 2.0 * curLinearCycleTime : 1.0 - 2.0 * (curLinearCycleTime - 0.5);
    return smoothstep(0.0, 1.0, curLinearCycleTime);
}

bool isInRange(in float val, in float minVal, in float maxVal) {
    return (val >= minVal && val <= maxVal);
}

bool isCulled(in Ray ray, in vec3 hitSurfaceNormal) {
    float rayDirectionNormalDot = dot(ray.direction, hitSurfaceNormal);

    bool isCulled = (((gl_IncomingRayFlagsNV & gl_RayFlagsCullBackFacingTrianglesNV) != 0) && (rayDirectionNormalDot > 0))
                    ||
                    (((gl_IncomingRayFlagsNV & gl_RayFlagsCullFrontFacingTrianglesNV) != 0) && (rayDirectionNormalDot < 0));

    return isCulled;
}

bool isAValidHit(in Ray ray, in float thit, in vec3 hitSurfaceNormal) {
    return isInRange(thit, gl_RayTminNV, gl_RayTmaxNV) && !isCulled(ray, hitSurfaceNormal);
}

void swap(inout float val0, inout float val1) {
    float tmp = val0;
    val0 = val1;
    val1 = tmp;
}

vec3 hitWorldPosition() {
    return gl_WorldRayOriginNV + gl_RayTmaxNV * gl_WorldRayDirectionNV;
}

vec3 hitAttribute(vec3 vertexAttribute[3], vec3 barycentrics) {
    return vertexAttribute[0] +
        barycentrics.x * (vertexAttribute[1] - vertexAttribute[0]) +
        barycentrics.y * (vertexAttribute[2] - vertexAttribute[0]);
}

Ray getRayInAABBPrimitiveLocalSpace() {
    PrimitiveInstancePerFrameBuffer attr = aabbPrimitiveAttribs[aabbCB.instanceIndex];

    Ray ray;
    ray.origin = (attr.bottomLevelASToLocalSpace * vec4(gl_ObjectRayOriginNV, 1.0)).xyz;
    ray.direction = (mat3x3(attr.bottomLevelASToLocalSpace) * gl_ObjectRayDirectionNV);
    return ray;
}

bool solveQuadraticEqn(float a, float b, float c, out float x0, out float x1) {
    float discr = b * b - 4.0 * a * c;
    if (discr < 0) return false;
    else if (discr == 0.0) x0 = x1 = -0.5 * b / a;
    else {
        float q = (b > 0.0) ?
            -0.5 * (b + sqrt(discr)) :
            -0.5 * (b - sqrt(discr));
        x0 = q / a;
        x1 = c / q;
    }

    if (x0 > x1) swap(x0, x1);

    return true;
}

vec3 calculateNormalForARaySphereHit(in Ray ray, in float thit, vec3 center) {
    vec3 hitPosition = ray.origin + thit * ray.direction;
    return normalize(hitPosition - center);
}

bool solveRaySphereIntersectionEquation(in Ray ray, out float tmin, out float tmax, in vec3 center, in float radius) {
    vec3 L = ray.origin - center;
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(ray.direction, L);
    float c = dot(L, L) - radius * radius;
    return solveQuadraticEqn(a, b, c, tmin, tmax);
}

bool raySphereIntersectionTest(in Ray ray, out float thit, out float tmax, out ProceduralPrimitiveAttributes attr, in vec3 center, in float radius) {
    float t0, t1;

    if (!solveRaySphereIntersectionEquation(ray, t0, t1, center, radius)) return false;

    tmax = t1;

    if (t0 < gl_RayTminNV) {
        if (t1 < gl_RayTminNV) return false;

        attr.normal = calculateNormalForARaySphereHit(ray, t1, center);
        if (isAValidHit(ray, t1, attr.normal)) {
            thit = t1;
            return true;
        }
    }
    else {
        attr.normal = calculateNormalForARaySphereHit(ray, t0, center);
        if (isAValidHit(ray, t0, attr.normal)) {
            thit = t0;
            return true;
        }

        attr.normal = calculateNormalForARaySphereHit(ray, t1, center);
        if (isAValidHit(ray, t1, attr.normal)) {
            thit = t1;
            return true;
        }
    }

    return false;
}

bool raySpheresIntersectionTest(in Ray ray, out float thit, out ProceduralPrimitiveAttributes attr) {
    const int N = 3;
    vec3 centers[N] = {
        vec3(-0.3, -0.3, -0.3),
        vec3(0.1, 0.1, 0.4),
        vec3(0.35, 0.35, 0.0)
    };

    float radii[N] = { 0.6, 0.3, 0.15 };
    bool hitFound = false;

    thit = gl_RayTmaxNV;

    for (int i = 0; i < N; i++) {
        float _thit;
        float _tmax;

        ProceduralPrimitiveAttributes _attr;

        if (raySphereIntersectionTest(ray, _thit, _tmax, _attr, centers[i], radii[i])) {
            if (_thit < thit) {
                thit = _thit;
                attr = _attr;
                hitFound = true;
            }
        }
    }

    return hitFound;
}

bool rayAABBIntersectionTest(Ray ray, vec3 aabb[2], out float tmin, out float tmax) {

    vec3 tmin3, tmax3;
    ivec3 sign3 = ivec3(ray.direction.x > 0 ? 1 : 0, ray.direction.y > 0 ? 1 : 0, ray.direction.z > 0 ? 1 : 0);
    tmin3.x = (aabb[1 - sign3.x].x - ray.origin.x) / ray.direction.x;
    tmax3.x = (aabb[sign3.x].x - ray.origin.x) / ray.direction.x;

    tmin3.y = (aabb[1 - sign3.y].y - ray.origin.y) / ray.direction.y;
    tmax3.y = (aabb[sign3.y].y - ray.origin.y) / ray.direction.y;

    tmin3.z = (aabb[1 - sign3.z].z - ray.origin.z) / ray.direction.z;
    tmax3.z = (aabb[sign3.z].z - ray.origin.z) / ray.direction.z;

    tmin = max(max(tmin3.x, tmin3.y), tmin3.z);
    tmax = min(min(tmax3.x, tmax3.y), tmax3.z);

    return tmax > tmin && tmax >= gl_RayTminNV && tmin <= gl_RayTmaxNV;
}

bool rayAABBIntersectionTest(Ray ray, vec3 aabb[2], out float thit, out ProceduralPrimitiveAttributes attr) {

    float tmin, tmax;
    if (rayAABBIntersectionTest(ray, aabb, tmin, tmax)) {
        thit = tmin >= gl_RayTminNV ? tmin : tmax;

        vec3 hitPosition = ray.origin + thit * ray.direction;
        vec3 distanceToBounds[2] = {
            abs(aabb[0] - hitPosition),
            abs(aabb[1] - hitPosition)
        };

        const float eps = 0.0001;
        if (distanceToBounds[0].x < eps) attr.normal = vec3(-1.0, 0.0, 0.0);
        else if (distanceToBounds[0].y < eps) attr.normal = vec3(0.0, -1.0, 0.0);
        else if (distanceToBounds[0].z < eps) attr.normal = vec3(0.0, 0.0, -1.0);
        else if (distanceToBounds[1].x < eps) attr.normal = vec3(1.0, 0.0, 0.0);
        else if (distanceToBounds[1].y < eps) attr.normal = vec3(0.0, 1.0, 0.0);
        else if (distanceToBounds[1].z < eps) attr.normal = vec3(0.0, 0.0, 1.0);

        return isAValidHit(ray, thit, attr.normal);
    }

    return false;
}

bool rayAnalyticGeometryIntersectionTest(in Ray ray, in uint analyticPrimitiveType, out float thit, out ProceduralPrimitiveAttributes attr) {
    vec3 aabb[2] = {
        vec3(-1.0, -1.0, -1.0),
        vec3(1.0, 1.0, 1.0)
    };

    switch (analyticPrimitiveType) {
        case 0: return rayAABBIntersectionTest(ray, aabb, thit, attr);
        case 1: return raySpheresIntersectionTest(ray, thit, attr);
        default: return false;
    }

    return false;
}

void main() {

    Ray localRay = getRayInAABBPrimitiveLocalSpace();
    uint primitiveType = aabbCB.primitiveType;

    float thit;
    ProceduralPrimitiveAttributes attr;

    if (rayAnalyticGeometryIntersectionTest(localRay, primitiveType, thit, attr)) {
        PrimitiveInstancePerFrameBuffer aabbAttribute = aabbPrimitiveAttribs[aabbCB.instanceIndex];
        attr.normal = mat3x3(aabbAttribute.localSpaceToBottomLevelAS) * attr.normal;
        attr.normal = normalize( attr.normal * mat3x3(gl_ObjectToWorldNV) );

        hitNormal = attr.normal;

        reportIntersectionNV(thit, 0);
    }
}
